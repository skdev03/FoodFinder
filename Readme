
I used MVVM with Coordinator and RxSwift. It's been a while I used RxSwift, so it took me a little longer than I expected to get the work done within 4 hours. As a result, I was not able to work on the Unit tests.

I organized all the classes in their respective folders.
Used protocols and dependency injection which would make the unit testing much more easier.

Views:
SearchViewController
BusinessCell

Model:
Business (contains the data parsed from the JSON)

ViewModel:
SearchViewModel

The SearchViewModel which is created inside the SearchViewController triggers a call to the get the new results for the API when the user starts typing a search term. When it gets the results back, it updates the observable which is used to bind to the tableView in SearchViewController. Used custom image caching mechanism for the images.

If I had more time:
1. Would have cleaned up the search functionality and made it more efficient. There are some minor issues.
2. Would have implemented a detail view when tapped on a result. 
3. Would have worked on the unit tests. 
4. Currently the search is reverting back when we tap on the Cancel button on the search bar. I would have fixed it.
5. Would have refactored the RxSwift binding to make it a little more efficient.
6. Would have created BusinessViewModel to pass in to the BusinessCell instead of passing the actual Business model.
7. Would have used rx for locationManager to get the current location updates more efficiently.
8. Would also have liked to use Combine, if that was an option.
